<error>
<checker>SECURE_CODING</checker>
<file>/home/rose/Desktop/jasper-1.900.1/src/libjasper/base/jas_string.c</file>
<function>jas_strdup</function>
<score>100</score>
<ordered>false</ordered>
<event>
<main>true</main>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;strcpy(char * restrict, char const * restrict)&quot; can cause a buffer overflow when done incorrectly.  If the destination string of a strcpy() is not large enough then anything might happen. Use strncpy() instead.</description>
<line>94</line>
</event>
<extra></extra>
<subcategory>none</subcategory>
</error>
<error>
<checker>SECURE_CODING</checker>
<file>/home/rose/Desktop/jasper-1.900.1/src/libjasper/jpc/jpc_enc.c</file>
<function>jpc_enc_encodemainhdr</function>
<score>100</score>
<ordered>false</ordered>
<event>
<main>true</main>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;sprintf(char * restrict, char const * restrict, ...)&quot; can cause a buffer overflow when done incorrectly.  Because sprintf() assumes an arbitrarily long string, callers must be careful not to overflow the actual space of the destination. Use snprintf() instead, or correct precision specifiers.</description>
<line>961</line>
</event>
<extra></extra>
<subcategory>none</subcategory>
</error>
<error>
<checker>SECURE_CODING</checker>
<file>/home/rose/Desktop/jasper-1.900.1/src/appl/jasper.c</file>
<function>addopt</function>
<score>100</score>
<ordered>false</ordered>
<event>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;strcat(char * restrict, char const * restrict)&quot; can cause a buffer overflow when done incorrectly.  The destination of a strcat() call must have enough space to accept the source. Use strncat() instead.</description>
<line>459</line>
</event>
<event>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;strcat(char * restrict, char const * restrict)&quot; can cause a buffer overflow when done incorrectly.  The destination of a strcat() call must have enough space to accept the source. Use strncat() instead.</description>
<line>461</line>
</event>
<extra></extra>
<subcategory>none</subcategory>
</error>
<error>
<checker>SECURE_CODING</checker>
<file>/home/rose/Desktop/jasper-1.900.1/src/libjasper/pnm/pnm_enc.c</file>
<function>pnm_putdata</function>
<score>100</score>
<ordered>false</ordered>
<event>
<main>true</main>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;sprintf(char * restrict, char const * restrict, ...)&quot; can cause a buffer overflow when done incorrectly.  Because sprintf() assumes an arbitrarily long string, callers must be careful not to overflow the actual space of the destination. Use snprintf() instead, or correct precision specifiers.</description>
<line>377</line>
</event>
<extra></extra>
<subcategory>none</subcategory>
</error>
<error>
<checker>SECURE_CODING</checker>
<file>/home/rose/Desktop/jasper-1.900.1/src/libjasper/base/jas_seq.c</file>
<function>jas_seq2d_output</function>
<score>100</score>
<ordered>false</ordered>
<event>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;sprintf(char * restrict, char const * restrict, ...)&quot; can cause a buffer overflow when done incorrectly.  Because sprintf() assumes an arbitrarily long string, callers must be careful not to overflow the actual space of the destination. Use snprintf() instead, or correct precision specifiers.</description>
<line>435</line>
</event>
<event>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;strcat(char * restrict, char const * restrict)&quot; can cause a buffer overflow when done incorrectly.  The destination of a strcat() call must have enough space to accept the source. Use strncat() instead.</description>
<line>443</line>
</event>
<extra></extra>
<subcategory>none</subcategory>
</error>
<error>
<checker>SECURE_CODING</checker>
<file>/home/rose/Desktop/jasper-1.900.1/src/libjasper/jp2/jp2_enc.c</file>
<function>jp2_encode</function>
<score>100</score>
<ordered>false</ordered>
<event>
<main>true</main>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;sprintf(char * restrict, char const * restrict, ...)&quot; can cause a buffer overflow when done incorrectly.  Because sprintf() assumes an arbitrarily long string, callers must be careful not to overflow the actual space of the destination. Use snprintf() instead, or correct precision specifiers.</description>
<line>346</line>
</event>
<extra></extra>
<subcategory>none</subcategory>
</error>
<error>
<checker>SECURE_CODING</checker>
<file>/home/rose/Desktop/jasper-1.900.1/src/libjasper/base/jas_seq.c</file>
<function>jas_seq2d_input</function>
<score>100</score>
<ordered>false</ordered>
<event>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;fscanf(FILE * restrict, char const * restrict, ...)&quot; can cause a buffer overflow when done incorrectly.  fscanf() assumes an arbitrarily large string, so callers must use correct precision specifiers or never use fscanf(). Use correct precision specifiers or do your own parsing.</description>
<line>391</line>
</event>
<event>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;fscanf(FILE * restrict, char const * restrict, ...)&quot; can cause a buffer overflow when done incorrectly.  fscanf() assumes an arbitrarily large string, so callers must use correct precision specifiers or never use fscanf(). Use correct precision specifiers or do your own parsing.</description>
<line>393</line>
</event>
<event>
<tag>secure_coding</tag>
<description>[VERY RISKY]. Using &quot;fscanf(FILE * restrict, char const * restrict, ...)&quot; can cause a buffer overflow when done incorrectly.  fscanf() assumes an arbitrarily large string, so callers must use correct precision specifiers or never use fscanf(). Use correct precision specifiers or do your own parsing.</description>
<line>405</line>
</event>
<extra></extra>
<subcategory>none</subcategory>
</error>
