<!-- Since generating databases and creating projects can take a 
while, we also have a loading div on this page -->
<div id="loader">
  <img src="/ajax-loader.gif" alt="loading...">
</div>
<!-- Here is the main meat of the form: -->
<table>
  <!-- The first part of this form is the database creation. 
  Of course, we only show this if the project hasn't yet been imported.
  In other words, if there are no displays for this project, then
  the project has not yet been imported and we show the database
  creation form. -->
  <% if !@displays_exist %>
    <%= form_tag({:action => "database"}, { :multipart => true}) do %>
    <!-- Top of the form is the source upload. This consists
    of a header and a file field, unless source is already uploaded -->
    <tr>
      <th colspan=3>Source</th>
    </tr>
      <tr>
        <td colspan=3> 
          <% if @uploaded[:source] == true %> 
          Source already uploaded
          <% else %>
          <%= label_tag(:file, "Archive containing src: ") %>
          <%= file_field(:file, :source, class: 'file') %>
          <% end %>
        </td>
      </tr>
      <!-- Next is analysis upload. For each possible analysis file,
      there is a checkbox, the name, and a file form. The last column 
      contains the digest_diagnostics script output. -->
      <tr>
        <th>Tool & Platform</th>
        <th>Diagnostics & Metrics</th>
        <th>Script Output</th>
      </tr>
      <% for i in 0..(Rails.configuration.ids.length-1) do %>
      <tr>
        <!-- Checkbox input for analysis file. Files will be ignored
        unless checked off.  -->
        <td class="tdToolName">
          <input type="checkbox" class="selectTool" name="selectedTools[]" value="<%= Rails.configuration.ids[i] %>" <%= params[:selectedTools] && params[:selectedTools].include?(Rails.configuration.ids[i].to_s) ? "checked" : "" %> > <%= Rails.configuration.ids[i] %> / <%= Rails.configuration.names[i] %> / <%= Rails.configuration.platforms[i] %>
        </td>
        <!-- file field for uploading analysis files. If the file is 
        already uploaded, then we don't show a new field. -->
        <td>
          <% if @uploaded[Rails.configuration.ids[i].to_s] == true %>
          Tool output already uploaded. 
          <% else %>
          <%= label_tag(Rails.configuration.ids[i],"Tool output: ") %>
          <%= file_field(:file, Rails.configuration.ids[i], class: 'file') %> 
          <% end %>
        </td>
        <td> 
          <!-- If an analysis file has been run through digest,
           diagnostics, then the output for a tool with tool id i is
           passed in @out[i]. Note we use the h flag and simple_format
           helper to escape characters. -->
          <%=h @out && @out[Rails.configuration.ids[i].to_s] ? simple_format(@out[Rails.configuration.ids[i].to_s]) : ""%>
        </td>
      </tr>
      <% end %>
      <!-- Finally, a button to trigger the action to run the scripts -->
      <tr>
        <td colspan=3 class='center'>
          <%= submit_tag("Create database", {class: 'submitButton', id: 'create_database_button'}) %>
        </td>
      </tr>
    <% end %>
    <!-- If a database has been generated by the scripts, allow the user
    to press the Create project from database button -->
    <% if @database_exists == true && @uploaded.any? && @uploaded[:source] %>
    <tr>
      <td colspan=3 class='center'>
        <%= form_tag({:action => "fromDatabase"}) do %>
          <%= submit_tag("Create project from database", {class: 'submitButton', id: 'create_project_button'}) %>
        <% end %>
      </td>
    </tr>
    <% end %>
  <% else %>
  <!-- For this else clause, we deal with the case where displays 
  for this project already exist in the Rails database. This means the project
  has already been created, and so we don't show the above form.  -->
  <tr>
    <td>
      Project already created. Nothing to do here unless you wish to download the scale database generated by the scripts. 
    </td>
  </tr>
  <% end %>
  <% if @database_exists == true %>
  <!-- Here, if the database generated by the scripts exists then we
  allow the user to download it directly -->
  <tr>
    <td colspan=3 class='center'>
      <%= form_tag({:action => "downloadDatabase"}) do %>
        <%= submit_tag("Download database", {class: 'submitButton', id: 'download_database_button'}) %>
      <% end %>
    </td>
  </tr>
  <% end %>
</table>
