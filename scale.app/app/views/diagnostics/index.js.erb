// This file contains the javascript that is run upon loading a project's diagnostics. 
// It sets on click events and inserts ocntent into the two splitted areas
// This file is organized very poorly; the comments
// serve to describe what each snippet does, which occurs on diagnostics/page load.

// When the page is loaded, we hide the loader gif
$("#loader").hide();


var page_url = window.location.href;
var temp = page_url.split("/");
var view = temp[temp.length -1]

if(view == "unfused"){
	renderDiagsTable("fast")
        $("#fused_off_button").css("background-color", "#BBBBBB");
        $("#fused_on_button").css("background-color", "#EEEEEE");     

}
	
else{
	renderDiagsTable("fused")
        $("#fused_on_button").css("background-color", "#BBBBBB");
        $("#fused_off_button").css("background-color", "#EEEEEE");
 
}



function setEventListeners(){


// Set the change event listener; in other words, when the selectAll box
// is checked, then set the checkbox status of all other checkboxes
// to the same checked status. 
$("#selectAllCheckboxes").change(function() {
    $("input.selectDiag").prop("checked", this.checked);
});

/*Set up event listeners for detecting changes made to editable fields*/

//Verdict field
$("div.verdict").find("span").change(function() {
    handleUpdate($(this), 'div.verdict');
});


//Flag field
$("div.flag").find("span").on('DOMSubtreeModified',function(event){
    handleUpdate($(this), 'div.flag');
});


//Supplemental field
$("div.ui-dialog-titlebar").find("button").click(function() {
   handleUpdate($(this), 'div.supplemental');
});


//Notes field
$("div.notes").find("span").on('DOMSubtreeModified',function(){
   handleUpdate($(this), 'div.notes');
});

}


function formatFusedAlerts(){
   $(".meta_alert").each(function(){
      $meta_alert = $(this);
      $new_row = $meta_alert.clone();

      //display diagnostic id rather than meta_alert_id on this row
      var diag_id = $meta_alert.attr('id');
      //var meta_alert_id = getMetaAlertID($(this))
      $new_row.find('div.meta_alert_id').find("p").text(diag_id + " (d)");

      //update class attribute
      $new_row.addClass('sub_alert');
      $new_row.removeClass('meta_alert');
      $new_row.insertAfter($(this));
      $meta_alert.find("td").each(function(){
         //hide message, checker, and tool
         if($(this).hasClass("message_cell") || $(this).hasClass("checker_cell") || $(this).hasClass("tool_cell")){
            $(this).children().children().hide();
         }
     });
 });
            

   $(".sub_alert").each(function(){
      $sub_alert = $(this);
      $sub_alert.find("td").each(function(){
         //only show message, checker, and tool
         if(!$(this).hasClass("id_cell") && !$(this).hasClass("message_cell") && !$(this).hasClass("checker_cell") && !$(this).hasClass("tool_cell")){
            $(this).children().children().hide();
         }
      });
  });
}

function getMetaAlertID(element){   
     var meta_alert_id = "-1"
     var classes = element.closest("tr").attr('class').split(/\s+/);
     for (var i=0; i < classes.length; i++) {
          var c = classes[i]
          if(!isNaN(c)){
               meta_alert_id = c
          }
     }
     return meta_alert_id
}

function setFusedEventListeners(){


   // Set the change event listener; in other words, when the selectAll box
   // is checked, then set the checkbox status of all other checkboxes
   // to the same checked status. 
   $("#selectAllCheckboxes").change(function() {
      $("input.selectDiag").prop("checked", this.checked);
   });


    /*Expand sub_alerts with the same meta_alert_id as the meta_alert that was clicked */
    $(".expandable_cell").click(function(){
        var meta_alert_id = getMetaAlertID($(this))
        //var meta_alert_id = $(this).closest("tr").attr('class');
        $( ".sub_alert" ).each(function() {
            //var sub_alert_id = $(this).find('div.meta_alert_id').find("p").text();
            var shared_meta_alert = $(this).hasClass(meta_alert_id);
            if(shared_meta_alert) {
                $(this).toggle(); //display row
            }
	});
    }); 

    $(".best_in_place_flag").on('DOMSubtreeModified',function(){

        var row  = $(this).closest("tr");
        var row_id = row.attr('id');
        var meta_alert_id = getMetaAlertID($(this)) 
        var flag = $(this).find("span").text();

        
	var flag_value = -1;

	if(flag.charAt(0)){
             if(flag == "[x]"){
		flag_value = 1;
	      }
              else {
		flag_value = 0;
              }
	}


        if(flag_value != -1){
             if(flag_value === 1){
                flag_value = true;
             }
             else{
                flag_value = false;
             }

           
             if (row.hasClass('meta_alert')) {
             console.log(row_id)
             console.log(meta_alert_id); 
             console.log(flag);
             console.log(flag_value);
                  $.post('/diagnostics/fusedUpdate', { row_id: row_id, meta_alert_id: meta_alert_id, elem: "flag", value: flag_value})
             }
		           
	}
    });

    $(".best_in_place_verdict").on('DOMSubtreeModified',function(){
        var row = $(this).closest("tr");
	var row_id = row.attr('id');
        var meta_alert_id = getMetaAlertID($(this))
        var verdict = $(this).text();
        //console.log(row_id);
        //console.log(meta_alert_id);
        //console.log(verdict);

        var verdict_number = -1;
        if(verdict==="[Unknown]"){
        	verdict_number = 0;
	}
	else if(verdict==="[Complex]"){
		verdict_number = 1;
	}
	else if(verdict==="[False]"){
		verdict_number = 2;
	}
	else if(verdict==="[Dependent]"){
		verdict_number = 3;
	}
	else if(verdict==="[True]"){
		verdict_number = 4;
	}


        if(row.hasClass('meta_alert') && verdict_number != -1){
        console.log("****");
        console.log(row_id);
        console.log(meta_alert_id);
        console.log(verdict);
        console.log(verdict);
        	$.post('/diagnostics/fusedUpdate', { row_id: row_id, meta_alert_id: meta_alert_id, elem: "verdict", value: verdict_number})
	}
           
    });

    $(".best_in_place_notes").on('DOMSubtreeModified',function(){
        var row = $(this).closest("tr");
        var row_id = row.attr('id');
        var meta_alert_id = getMetaAlertID($(this))
        var notes_value = $(this).text();
        if(row.hasClass('meta_alert') && notes_value.length > 0){
            console.log("notes fused update");
            $.post('/diagnostics/fusedUpdate', { row_id: row_id, meta_alert_id: meta_alert_id, elem: "notes", value: notes_value})
      

	}
           
    });

    $("div.ui-dialog-titlebar").find("button").click(function() {
        var row_id = $("#editing_id_container").data("editing-id");
        var $row = $("#" + row_id);
        var meta_alert_id = getMetaAlertID($row)
        console.log(meta_alert_id);
        console.log("printed meta_alert_id");
        //var meta_alert_id = $("#" + row_id).find('div.meta_alert_id').find("p").text();
        var text = $("#" + row_id).find('.supplemental_cell').find("div").find("span").text();
        var tags = text.split(" ");

        var values = [];


        if (tags.indexOf("Ignored") >= 0) {
            values.push(1)
        }
        else{
            values.push(0)
        }

        if (tags.indexOf("Dead") >= 0) {
            values.push(1)
        }
        else{
            values.push(0)
        }

        if (tags.indexOf("Inapplicable") >= 0) {
            values.push(1)
        }
        else{
            values.push(0)
        }

        if (tags.indexOf("High") >= 0) {
            values.push(3)
        }
        else if (tags.indexOf("Med") >= 0){
            values.push(2)
        }
        else if (tags.indexOf("Low") >= 0){
            values.push(1)
        }
        else{
            values.push(0)
        }
  
        if ($row.hasClass('meta_alert')) {
	console.log(row_id)
	console.log(meta_alert_id)
	console.log(text)
	console.log(tags);
             $.post('/diagnostics/fusedUpdate', { row_id: row_id, meta_alert_id: meta_alert_id, elem: "supplemental", value: values})
        }
 
    });

}

function renderDiagsTable(table){
     // Insert the HTML for the table of diagnostics 
     $("#tableContainer").html("<%= escape_javascript(render(:partial => 'diagnostics/diagsTable')) %>");

     // Insert the HTML for the pagination links
     $(".pageContainer").html("<%= escape_javascript(render(:partial => 'diagnostics/diagsPerPage')) %>");

     if(table === "fast"){
          $("#diagsTableBody").html("<%= escape_javascript(render(:partial => 'diagnostics/fastdiagnostics')) %>");
          setEventListeners();
     }
     else{
          $("#diagsTableBody").html("<%= escape_javascript(render(:partial => 'diagnostics/fuseddiagnostics')) %>");
          formatFusedAlerts();
          setFusedEventListeners();
     }
}




/*Retrieves all table rows with the same meta_alert_id*/
function getMatchingRows(meta_alert_id, table_row){
    var matching_rows = [];
    table_row.each(function() {
        $this = $(this);
        //$current_id = $this.find('div.meta_alert_id').find("p").text();
        $current_id = $this.attr('class');

        if($current_id === meta_alert_id){
	    matching_rows.push($this)
        }

    });
    return matching_rows;
}


/*Hides all table rows that don't share the same meta_alert_id*/
function showDifference(table_rows, meta_alert_id){
     table_rows.each(function() {
          $this = $(this);
          //$current_id = $this.find('div.meta_alert_id').find("p").text();
          $current_id = $this.attr('class');
          if($current_id !== meta_alert_id){ 
               $this.hide();
          }
     });
}


/*Verifies that the change doesn't cause a conflict (e.g. rows with the same meta_alert_id, but different verdicts)*/
function validateChange(table_rows, meta_alert_id, $current_row){
     
     var new_verdict = $current_row.find('div.verdict').find("span").text();
     var new_flag = $current_row.find('div.flag').find("span").text();
     var new_supplemental = $current_row.find('div.supplemental').find("span").text();
     var new_note = $current_row.find('div.notes').find("span").text();
     var matching_rows = getMatchingRows(meta_alert_id, table_rows);

     for (var i=0; i < matching_rows.length; i++) {
          var this_verdict = matching_rows[i].find('div.verdict').find("span").text();
          var this_flag = matching_rows[i].find('div.flag').find("span").text();
          var this_supplemental = matching_rows[i].find('div.supplemental').find("span").text();
          var this_note = matching_rows[i].find('div.notes').find("span").text();
          
      if(new_verdict !== this_verdict){
               return [matching_rows.length, "verdict"];
          }
         else if(new_flag !== this_flag){
               return [matching_rows.length, "flag"];
          }
         else if(new_supplemental !== this_supplemental){
               return [matching_rows.length, "supplemental"];
          }

         else if(new_note !== this_note){
               return [matching_rows.length, "notes"];
          }
     }
     return [matching_rows.length, "none"];
}

/*Ensures changes to table rows that will be fused don't conflict*/
function handleUpdate(target, div_class){

    $current_row = null;
    var new_input = null; 
    var fast_rows = $('#diagsTableBody > tr');

    $('#error').hide();
    fast_rows.show();

    var meta_alert_id;
    if(div_class !== 'div.supplemental'){
        $current_row = target.closest('tr'); 
        //meta_alert_id = $current_row.find('div.meta_alert_id').find("p").text();
        meta_alert_id = $current_row.attr('class');
    }
    else{
       var row_id = $("#editing_id_container").data("editing-id");
       $current_row = $("#" + row_id);
       //meta_alert_id = $current_row.find('div.meta_alert_id').find("p").text();
       meta_alert_id = $current_row.attr('class');
    }
    
    var result = validateChange(fast_rows, meta_alert_id, $current_row);
    if(result[1] !== "none"){
        var column_name = result[1];
        if(column_name === "supplemental"){
             column_name += " tag";
        }
        $('#error').text("Alerts that share an ID (same line number, same rule) must have the same " + column_name + ".");
	$('#error').show();
	showDifference(fast_rows, meta_alert_id);
    }
}




// Set the click event listener for the Go button and the pagination links
// to show the loading gif, since these actions usually take some time. 
$("input[value='Go'], div.pagination a").click(function() {
  $("#loader").show();
});

// Set the click event listener for the filter button to 
// show the loading gif. Also do some HTML5 client-side validation 
// of the form inputs, and hide the loader if it fails. 
$("input[value='Filter']").click(function(){
  $("#loader").show();

  if(!$("form[action='/diagnostics']")[0].checkValidity()){
    $("#loader").hide();
  }
});

// If the Filter button or the Go button to set pagination are clicked,
// then we should start at page 1 and so set the hidden input to page 1.
$("input[value='Filter'], input[value='Go']").click(function(){
  $("#page").val(1);
});

// initialize the Best_in_place gem for asynchronous updates. For details,
// look up Rails best_in_place
jQuery(function() {
  return $('.best_in_place').best_in_place();
});

// Set the click event listener on the table cells to expand the box 
// to show all the text upon click. We do this by toggling a 
// the status of the show class. If cell is not clicked, it is limited
// to a specific height specified in the CSS. 
$(function() {
  $('.diag_tables td').click(function() {
    if ($(this).attr("class") !== "flag" && $(this).attr("class") !== "verdict" && $(this).attr("class") !== "selectDiag") {
      return $(this).parent().find("div").toggleClass("show");
    }
  });
});

// This sets the click event listener for clicking on a pagination link.
// Instead of actually sending the user to a page, we suppress the 
// default link action and instead perform an AJAX request to load
// the new pagination asynchronously. Note that we specify the response
// type as script, so this exact file will be rerun on response.
$("div.pagination a").bind('click', function(e){
  e.preventDefault();
  $.ajax({
    type: 'GET',
    url: this.href,
    dataType: 'script'
  });
});

// Set the value of the hidden page input to the current page.
$("#page").val(<%= @temp.current_page %>);

// This function will validate the checkboxes for mass-updating 
// diagnostics. 
validateMassUpdate = function(e) {
   var flag = $("#flag").val();
   var verdict = $("#mass_update_verdict").val();
   
   if(flag == -1 && verdict == -1) {
     alert("Select a verdict and/or flag setting for the update operation.")
     return false;
   } else if ($("input.selectDiag:checkbox:checked").length == 0) {
     alert("No diagnostics on this page are selected.")
     return false;
   } 
   return true;
}

// This function will wait until the page is completely loaded to eventually
// scroll the bottom window down so that the highlighted line isn't stuck
// to the top of the bottom half. 
// For some browser timing issue on the load events of an iframe, we need
// to keep querying until the contents of the iframe finally exist before
// scrolling the iframe to the desired location. 
// This is just a function definition; it is called after inserting 
// the highlighter into the page. 
eventuallyScroll = function f() {
  if($("#src_frame").contents().scrollTop() === 0) {
    setTimeout(f,10);
  }
  else {
    $("#src_frame").contents().scrollTop($("#src_frame").contents().scrollTop()-60)
  }
}

// This function will find the location of the line correpsonding to the
// number clicked, and highlight the line with a yellow line. This
// function is set to run on load of the source frame. 
// This funciton is called when a GNU global link is clicked. 
targetFrame = function(e){
  // First, prevent default load events
  e.preventDefault();
  var link = this.href;
  // Also remove any previous load events set (i.e. previous 
  // calls to this function)
  $("#src_frame").unbind("load");

  // Finally, set the load function as follows:
  $("#src_frame").load(function() {
    // Remove any previous highlighters
    $("#src_frame").contents().find(".yellow-highlighter").remove();

    // Search for the desired line within the iframe and get its position
    var line = $("#src_frame").contents().find("#"+link.split("#")[1]);
    var position = line.position();

    // Also get the font size and height
    var fontSize = $(line).css('font-size');
    var lineHeight = Math.floor(parseInt(fontSize.replace('px','')) * 1.5);
    if (lineHeight === undefined || lineHeight === 0) {
      lineHeight = ($(line).css('line-height'));
    }

    // Add the highlighter and put it at the right position
    line.append($("<div />").addClass('yellow-highlighter').css({
      'left': position.left,
      'right': position.right,
      'top': position.top-line.css('line-height'),
      'bottom': position.bottom,
      'height': lineHeight,
      'background-color': 'yellow',
      'position': 'absolute',
      'z-index': -1,
      'width': '99%'
    }));

    // Finally, call the scroll function to eventually scroll to the 
    // proper location
    eventuallyScroll();
  });

  // Finally, set the iframe source to be the desired URL. This will
  // trigger the load event defined above. 
  $("#src_frame").attr("src", link);

  // Actually, if the page is the same GNU global page, the load event 
  // will not fire. In this case manually trigger the load event. 
  if($("#src_frame").attr("src").split("#")[0] === link.split("#")[0]) {
    $("#src_frame").trigger("load");
  }
}

// Set the event listener for clicking a GNU global link to be the 
// targetFrame function defined above. 
$("div.line a").click(targetFrame);

// This defines a click event listener for clicking on a rule link
// to open the link in a new window. 
$("div.rule a").click(function(e){
  e.preventDefault();
  window.open(this.href);
})

